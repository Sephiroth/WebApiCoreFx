<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApiCoreFx</name>
    </assembly>
    <members>
        <member name="T:WebApiCoreFx.Controllers.FileTransmittalController">
            <summary>
            文件传输接口
            </summary>
        </member>
        <member name="F:WebApiCoreFx.Controllers.FileTransmittalController.BUFF_SIZE">
            <summary>
            buffer大小:100k
            </summary>
        </member>
        <member name="M:WebApiCoreFx.Controllers.FileTransmittalController.UploadAsync">
            <summary>
            上传大文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiCoreFx.Controllers.FileTransmittalController.DownloadFileAsync(System.String,System.String)">
            <summary>
            下载大文件
            </summary>
            <param name="filename"></param>
            <param name="respType"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiCoreFx.Controllers.TestController.Get(System.String)">
            <summary>
            查询用户
            </summary>
            <param name="nickName"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiCoreFx.Controllers.ValuesController.Post(System.String)">
            <summary>
            ValidateAntiForgeryToken特性(Request.Header包含X-XSRF-TOKEN才能正常请求)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiCoreFx.Ioc.IocExtension.IocAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[],Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            基于Microsoft.Extensions.DependencyInjection的拓展方法注册程序集
            </summary>
            <param name="services"></param>
            <param name="assemblys"></param>
            <param name="serviceLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiCoreFx.Ioc.IocExtension.IocByAutofac(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])">
            <summary>
            仅适用于.net core 3.0之前的版本
            </summary>
            <param name="services"></param>
            <param name="assemblys"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiCoreFx.Ioc.IocExtension.RegisterAssemblys(Autofac.ContainerBuilder,System.String[])">
            <summary>
            通过程序集名称
            </summary>
            <param name="builder"></param>
            <param name="assemblys">两个程序集的名称:0-接口程序集;1-实现程序集</param>
            <returns></returns>
        </member>
        <member name="M:WebApiCoreFx.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            (.net core2.2及以下,通过Autofac 实现Ioc,返回IServiceProvider)
            </summary>
            <param name="services"></param>
            <returns>IServiceProvider</returns>
        </member>
        <member name="M:WebApiCoreFx.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            由Autofac实现Ioc(.Net Core 3.0 + 版本可用)
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:WebApiCoreFx.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:WebApiCoreFx.Startup.CreateDirectory(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:WebApiCoreFx.Startup.HandleBranch(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            自定义中间件匹配Header处理
            </summary>
            <param name="app"></param>
        </member>
    </members>
</doc>
